/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Refund } from '../models';
// @ts-ignore
import { RefundsCreateRefundRequest } from '../models';
// @ts-ignore
import { RefundsGetAllResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RefundsApi - axios parameter creator
 * @export
 */
export const RefundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Refund
         * @summary Create a Refund
         * @param {RefundsCreateRefundRequest} [refundsCreateRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: async (refundsCreateRefundRequest?: RefundsCreateRefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/refunds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: refundsCreateRefundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/refunds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(refundsCreateRefundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all refunds
         * @summary List all Refunds
         * @param {string} [limit] A limit on the number of objects to be returned, between 1 and 100.
         * @param {string} [startingAfter] A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list.
         * @param {string} [endingBefore] A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (limit?: string, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/refunds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/refunds',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retreieve a refund by its ID
         * @summary Retrieve a Refund
         * @param {string} refundId ID of the refund to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (refundId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refundId' is not null or undefined
            assertParamExists('getById', 'refundId', refundId)
            const localVarPath = `/v2/refunds/{refund_id}`
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refundId !== undefined ? refundId : `-refund_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/refunds/{refund_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundsApi - functional programming interface
 * @export
 */
export const RefundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefundsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Refund
         * @summary Create a Refund
         * @param {RefundsApiCreateRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefund(requestParameters: RefundsApiCreateRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Refund>> {
            const refundsCreateRefundRequest: RefundsCreateRefundRequest = {
                amount: requestParameters.amount,
                payment_intent_id: requestParameters.payment_intent_id,
                reason: requestParameters.reason,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRefund(refundsCreateRefundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all refunds
         * @summary List all Refunds
         * @param {RefundsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: RefundsApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefundsGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retreieve a refund by its ID
         * @summary Retrieve a Refund
         * @param {RefundsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: RefundsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Refund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.refundId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefundsApi - factory interface
 * @export
 */
export const RefundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefundsApiFp(configuration)
    return {
        /**
         * Create a Refund
         * @summary Create a Refund
         * @param {RefundsApiCreateRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund(requestParameters: RefundsApiCreateRefundRequest, options?: AxiosRequestConfig): AxiosPromise<Refund> {
            return localVarFp.createRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all refunds
         * @summary List all Refunds
         * @param {RefundsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: RefundsApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<RefundsGetAllResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retreieve a refund by its ID
         * @summary Retrieve a Refund
         * @param {RefundsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: RefundsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Refund> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRefund operation in RefundsApi.
 * @export
 * @interface RefundsApiCreateRefundRequest
 */
export type RefundsApiCreateRefundRequest = {
    
} & RefundsCreateRefundRequest

/**
 * Request parameters for getAll operation in RefundsApi.
 * @export
 * @interface RefundsApiGetAllRequest
 */
export type RefundsApiGetAllRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 100.
    * @type {string}
    * @memberof RefundsApiGetAll
    */
    readonly limit?: string
    
    /**
    * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list.
    * @type {string}
    * @memberof RefundsApiGetAll
    */
    readonly startingAfter?: string
    
    /**
    * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof RefundsApiGetAll
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getById operation in RefundsApi.
 * @export
 * @interface RefundsApiGetByIdRequest
 */
export type RefundsApiGetByIdRequest = {
    
    /**
    * ID of the refund to retrieve
    * @type {string}
    * @memberof RefundsApiGetById
    */
    readonly refundId: string
    
}

/**
 * RefundsApiGenerated - object-oriented interface
 * @export
 * @class RefundsApiGenerated
 * @extends {BaseAPI}
 */
export class RefundsApiGenerated extends BaseAPI {
    /**
     * Create a Refund
     * @summary Create a Refund
     * @param {RefundsApiCreateRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApiGenerated
     */
    public createRefund(requestParameters: RefundsApiCreateRefundRequest, options?: AxiosRequestConfig) {
        return RefundsApiFp(this.configuration).createRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all refunds
     * @summary List all Refunds
     * @param {RefundsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApiGenerated
     */
    public getAll(requestParameters: RefundsApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return RefundsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retreieve a refund by its ID
     * @summary Retrieve a Refund
     * @param {RefundsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApiGenerated
     */
    public getById(requestParameters: RefundsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return RefundsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
