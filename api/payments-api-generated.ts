/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaymentsCreateTransactionRequest } from '../models';
// @ts-ignore
import { Transfer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a transaction from a user or a payment customer to the app. User the `/users/{user_id}/payout-methods` route to get a user\'s stored payment methods.
         * @summary Create a Payment
         * @param {PaymentsCreateTransactionRequest} [paymentsCreateTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction: async (paymentsCreateTransactionRequest?: PaymentsCreateTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentsCreateTransactionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentsCreateTransactionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a transaction from a user or a payment customer to the app. User the `/users/{user_id}/payout-methods` route to get a user\'s stored payment methods.
         * @summary Create a Payment
         * @param {PaymentsApiCreateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTransaction(requestParameters: PaymentsApiCreateTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const paymentsCreateTransactionRequest: PaymentsCreateTransactionRequest = {
                user_id: requestParameters.user_id,
                customer_id: requestParameters.customer_id,
                amount: requestParameters.amount,
                platform: requestParameters.platform,
                ach_info: requestParameters.ach_info,
                account_id: requestParameters.account_id,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTransaction(paymentsCreateTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * Creates a transaction from a user or a payment customer to the app. User the `/users/{user_id}/payout-methods` route to get a user\'s stored payment methods.
         * @summary Create a Payment
         * @param {PaymentsApiCreateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTransaction(requestParameters: PaymentsApiCreateTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.createTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTransaction operation in PaymentsApi.
 * @export
 * @interface PaymentsApiCreateTransactionRequest
 */
export type PaymentsApiCreateTransactionRequest = {
    
} & PaymentsCreateTransactionRequest

/**
 * PaymentsApiGenerated - object-oriented interface
 * @export
 * @class PaymentsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentsApiGenerated extends BaseAPI {
    /**
     * Creates a transaction from a user or a payment customer to the app. User the `/users/{user_id}/payout-methods` route to get a user\'s stored payment methods.
     * @summary Create a Payment
     * @param {PaymentsApiCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApiGenerated
     */
    public createTransaction(requestParameters: PaymentsApiCreateTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).createTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
