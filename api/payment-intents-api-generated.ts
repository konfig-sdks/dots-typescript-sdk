/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaymentIntent } from '../models';
// @ts-ignore
import { PaymentintentsConfirmIntentRequest } from '../models';
// @ts-ignore
import { PaymentintentsCreateIntentRequest } from '../models';
// @ts-ignore
import { PaymentintentsCreateIntentRequestTransferData } from '../models';
// @ts-ignore
import { PaymentintentsGetByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentIntentsApi - axios parameter creator
 * @export
 */
export const PaymentIntentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Confirm a payment intent that has not been confirmed yet.
         * @summary Confirm a Payment Intent
         * @param {string} paymentIntentId The ID if the Payment Intent to confirm.
         * @param {PaymentintentsConfirmIntentRequest} [paymentintentsConfirmIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmIntent: async (paymentIntentId: string, paymentintentsConfirmIntentRequest?: PaymentintentsConfirmIntentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentIntentId' is not null or undefined
            assertParamExists('confirmIntent', 'paymentIntentId', paymentIntentId)
            const localVarPath = `/v2/payment-intents/{payment_intent_id}/confirm`
                .replace(`{${"payment_intent_id"}}`, encodeURIComponent(String(paymentIntentId !== undefined ? paymentIntentId : `-payment_intent_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentintentsConfirmIntentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-intents/{payment_intent_id}/confirm',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentintentsConfirmIntentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Payment Intent
         * @summary Create a Payment Intent
         * @param {PaymentintentsCreateIntentRequest} [paymentintentsCreateIntentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntent: async (paymentintentsCreateIntentRequest?: PaymentintentsCreateIntentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payment-intents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentintentsCreateIntentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-intents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentintentsCreateIntentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a payment intent by its ID.
         * @summary Retrieve a Payment Intent
         * @param {string} paymentIntentId Payment Intent ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (paymentIntentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentIntentId' is not null or undefined
            assertParamExists('getById', 'paymentIntentId', paymentIntentId)
            const localVarPath = `/v2/payment-intents/{payment_intent_id}`
                .replace(`{${"payment_intent_id"}}`, encodeURIComponent(String(paymentIntentId !== undefined ? paymentIntentId : `-payment_intent_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-intents/{payment_intent_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all payment intents
         * @summary List all Payment Intents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payment-intents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-intents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentIntentsApi - functional programming interface
 * @export
 */
export const PaymentIntentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentIntentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Confirm a payment intent that has not been confirmed yet.
         * @summary Confirm a Payment Intent
         * @param {PaymentIntentsApiConfirmIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmIntent(requestParameters: PaymentIntentsApiConfirmIntentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const paymentintentsConfirmIntentRequest: PaymentintentsConfirmIntentRequest = {
                payment_method_id: requestParameters.payment_method_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmIntent(requestParameters.paymentIntentId, paymentintentsConfirmIntentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Payment Intent
         * @summary Create a Payment Intent
         * @param {PaymentIntentsApiCreateIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntent(requestParameters: PaymentIntentsApiCreateIntentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const paymentintentsCreateIntentRequest: PaymentintentsCreateIntentRequest = {
                description: requestParameters.description,
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                confirm: requestParameters.confirm,
                user_id: requestParameters.user_id,
                customer_id: requestParameters.customer_id,
                payment_method_id: requestParameters.payment_method_id,
                payment_method_types: requestParameters.payment_method_types,
                setup_future_usage: requestParameters.setup_future_usage,
                metadata: requestParameters.metadata,
                transfer_data: requestParameters.transfer_data,
                application_fee_amount: requestParameters.application_fee_amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntent(paymentintentsCreateIntentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a payment intent by its ID.
         * @summary Retrieve a Payment Intent
         * @param {PaymentIntentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: PaymentIntentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.paymentIntentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all payment intents
         * @summary List all Payment Intents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentIntent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentIntentsApi - factory interface
 * @export
 */
export const PaymentIntentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentIntentsApiFp(configuration)
    return {
        /**
         * Confirm a payment intent that has not been confirmed yet.
         * @summary Confirm a Payment Intent
         * @param {PaymentIntentsApiConfirmIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmIntent(requestParameters: PaymentIntentsApiConfirmIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.confirmIntent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Payment Intent
         * @summary Create a Payment Intent
         * @param {PaymentIntentsApiCreateIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntent(requestParameters: PaymentIntentsApiCreateIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.createIntent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a payment intent by its ID.
         * @summary Retrieve a Payment Intent
         * @param {PaymentIntentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PaymentIntentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all payment intents
         * @summary List all Payment Intents
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(options?: AxiosRequestConfig): AxiosPromise<Array<PaymentIntent>> {
            return localVarFp.listAll(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for confirmIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiConfirmIntentRequest
 */
export type PaymentIntentsApiConfirmIntentRequest = {
    
    /**
    * The ID if the Payment Intent to confirm.
    * @type {string}
    * @memberof PaymentIntentsApiConfirmIntent
    */
    readonly paymentIntentId: string
    
} & PaymentintentsConfirmIntentRequest

/**
 * Request parameters for createIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiCreateIntentRequest
 */
export type PaymentIntentsApiCreateIntentRequest = {
    
} & PaymentintentsCreateIntentRequest

/**
 * Request parameters for getById operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiGetByIdRequest
 */
export type PaymentIntentsApiGetByIdRequest = {
    
    /**
    * Payment Intent ID
    * @type {string}
    * @memberof PaymentIntentsApiGetById
    */
    readonly paymentIntentId: string
    
}

/**
 * PaymentIntentsApiGenerated - object-oriented interface
 * @export
 * @class PaymentIntentsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentIntentsApiGenerated extends BaseAPI {
    /**
     * Confirm a payment intent that has not been confirmed yet.
     * @summary Confirm a Payment Intent
     * @param {PaymentIntentsApiConfirmIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApiGenerated
     */
    public confirmIntent(requestParameters: PaymentIntentsApiConfirmIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).confirmIntent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Payment Intent
     * @summary Create a Payment Intent
     * @param {PaymentIntentsApiCreateIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApiGenerated
     */
    public createIntent(requestParameters: PaymentIntentsApiCreateIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).createIntent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a payment intent by its ID.
     * @summary Retrieve a Payment Intent
     * @param {PaymentIntentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApiGenerated
     */
    public getById(requestParameters: PaymentIntentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all payment intents
     * @summary List all Payment Intents
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApiGenerated
     */
    public listAll(options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).listAll(options).then((request) => request(this.axios, this.basePath));
    }
}
