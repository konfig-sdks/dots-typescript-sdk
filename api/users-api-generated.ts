/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaymentMethod } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { UsersAddPayoutMethodRequest } from '../models';
// @ts-ignore
import { UsersCreateNewUserRequest } from '../models';
// @ts-ignore
import { UsersListAllUsersResponse } from '../models';
// @ts-ignore
import { UsersSendVerificationTokenRequest } from '../models';
// @ts-ignore
import { UsersSubmitComplianceInfoRequest } from '../models';
// @ts-ignore
import { UsersSubmitComplianceInfoRequestW8ben } from '../models';
// @ts-ignore
import { UsersSubmitComplianceInfoRequestW9 } from '../models';
// @ts-ignore
import { UsersUpdateUserObjectRequest } from '../models';
// @ts-ignore
import { UsersVerifyUserTokenRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a payout method to the user. Payout method can be one of `paypal`, `venmo`, `ach`, or `cash_app`. Each method has different required parameters.
         * @summary Add a Payout Method
         * @param {string} userId Id of the user to fetch
         * @param {UsersAddPayoutMethodRequest} [usersAddPayoutMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayoutMethod: async (userId: string, usersAddPayoutMethodRequest?: UsersAddPayoutMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addPayoutMethod', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}/payout-methods`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersAddPayoutMethodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}/payout-methods',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersAddPayoutMethodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a user.
         * @summary Create a User
         * @param {UsersCreateNewUserRequest} [usersCreateNewUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser: async (usersCreateNewUserRequest?: UsersCreateNewUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersCreateNewUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersCreateNewUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by their id.
         * @summary Retrieve a User
         * @param {string} userId Id of the user to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all users connected to your application.
         * @summary List all Users
         * @param {string} [startingAfter] A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list.
         * @param {number} [limit] A limit on the number of objects to be returned, between 1 and 100.
         * @param {string} [endingBefore] A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers: async (startingAfter?: string, limit?: number, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user\'s connected payout methods.
         * @summary List Payout Methods
         * @param {string} userId Id of the user to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayoutMethods: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listPayoutMethods', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}/payout-methods`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}/payout-methods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user.
         * @summary Delete a User
         * @param {string} userId Id of the user to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeUser', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a user a verification token.
         * @summary Send a Verification Token
         * @param {string} userId Id of the user to fetch
         * @param {UsersSendVerificationTokenRequest} [usersSendVerificationTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationToken: async (userId: string, usersSendVerificationTokenRequest?: UsersSendVerificationTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('sendVerificationToken', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}/send-verification-token`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSendVerificationTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}/send-verification-token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSendVerificationTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add Compliance information to a user.
         * @summary Submit Compliance Information
         * @param {string} userId Id of the user to fetch
         * @param {UsersSubmitComplianceInfoRequest} [usersSubmitComplianceInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitComplianceInfo: async (userId: string, usersSubmitComplianceInfoRequest?: UsersSubmitComplianceInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('submitComplianceInfo', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}/compliance`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersSubmitComplianceInfoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}/compliance',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersSubmitComplianceInfoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update mutable fields of a user object.
         * @summary Update a user
         * @param {string} userId Id of the user to fetch
         * @param {UsersUpdateUserObjectRequest} [usersUpdateUserObjectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserObject: async (userId: string, usersUpdateUserObjectRequest?: UsersUpdateUserObjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserObject', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersUpdateUserObjectRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersUpdateUserObjectRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify a user with a token.
         * @summary Verify a User
         * @param {string} userId Id of the user to fetch
         * @param {UsersVerifyUserTokenRequest} [usersVerifyUserTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserToken: async (userId: string, usersVerifyUserTokenRequest?: UsersVerifyUserTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('verifyUserToken', 'userId', userId)
            const localVarPath = `/v2/users/{user_id}/verify`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: usersVerifyUserTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/users/{user_id}/verify',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(usersVerifyUserTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a payout method to the user. Payout method can be one of `paypal`, `venmo`, `ach`, or `cash_app`. Each method has different required parameters.
         * @summary Add a Payout Method
         * @param {UsersApiAddPayoutMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPayoutMethod(requestParameters: UsersApiAddPayoutMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const usersAddPayoutMethodRequest: UsersAddPayoutMethodRequest = {
                platform: requestParameters.platform,
                routing_number: requestParameters.routing_number,
                account_number: requestParameters.account_number,
                account_type: requestParameters.account_type,
                email: requestParameters.email,
                phone_number: requestParameters.phone_number,
                handle: requestParameters.handle,
                cash_tag: requestParameters.cash_tag
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPayoutMethod(requestParameters.userId, usersAddPayoutMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a user.
         * @summary Create a User
         * @param {UsersApiCreateNewUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewUser(requestParameters: UsersApiCreateNewUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const usersCreateNewUserRequest: UsersCreateNewUserRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                email: requestParameters.email,
                country_code: requestParameters.country_code,
                phone_number: requestParameters.phone_number,
                username: requestParameters.username,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewUser(usersCreateNewUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user by their id.
         * @summary Retrieve a User
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all users connected to your application.
         * @summary List all Users
         * @param {UsersApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllUsers(requestParameters: UsersApiListAllUsersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersListAllUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllUsers(requestParameters.startingAfter, requestParameters.limit, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user\'s connected payout methods.
         * @summary List Payout Methods
         * @param {UsersApiListPayoutMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPayoutMethods(requestParameters: UsersApiListPayoutMethodsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentMethod>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPayoutMethods(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user.
         * @summary Delete a User
         * @param {UsersApiRemoveUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUser(requestParameters: UsersApiRemoveUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUser(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a user a verification token.
         * @summary Send a Verification Token
         * @param {UsersApiSendVerificationTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVerificationToken(requestParameters: UsersApiSendVerificationTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersSendVerificationTokenRequest: UsersSendVerificationTokenRequest = {
                use_voice: requestParameters.use_voice
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerificationToken(requestParameters.userId, usersSendVerificationTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add Compliance information to a user.
         * @summary Submit Compliance Information
         * @param {UsersApiSubmitComplianceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitComplianceInfo(requestParameters: UsersApiSubmitComplianceInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersSubmitComplianceInfoRequest: UsersSubmitComplianceInfoRequest = {
                w9: requestParameters.w9,
                w8ben: requestParameters.w8ben
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitComplianceInfo(requestParameters.userId, usersSubmitComplianceInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update mutable fields of a user object.
         * @summary Update a user
         * @param {UsersApiUpdateUserObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserObject(requestParameters: UsersApiUpdateUserObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const usersUpdateUserObjectRequest: UsersUpdateUserObjectRequest = {
                default_payout_method: requestParameters.default_payout_method,
                auto_payout_enabled: requestParameters.auto_payout_enabled,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserObject(requestParameters.userId, usersUpdateUserObjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify a user with a token.
         * @summary Verify a User
         * @param {UsersApiVerifyUserTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserToken(requestParameters: UsersApiVerifyUserTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const usersVerifyUserTokenRequest: UsersVerifyUserTokenRequest = {
                token: requestParameters.token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyUserToken(requestParameters.userId, usersVerifyUserTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Add a payout method to the user. Payout method can be one of `paypal`, `venmo`, `ach`, or `cash_app`. Each method has different required parameters.
         * @summary Add a Payout Method
         * @param {UsersApiAddPayoutMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPayoutMethod(requestParameters: UsersApiAddPayoutMethodRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.addPayoutMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a user.
         * @summary Create a User
         * @param {UsersApiCreateNewUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUser(requestParameters: UsersApiCreateNewUserRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.createNewUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by their id.
         * @summary Retrieve a User
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUserById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all users connected to your application.
         * @summary List all Users
         * @param {UsersApiListAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllUsers(requestParameters: UsersApiListAllUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UsersListAllUsersResponse> {
            return localVarFp.listAllUsers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user\'s connected payout methods.
         * @summary List Payout Methods
         * @param {UsersApiListPayoutMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayoutMethods(requestParameters: UsersApiListPayoutMethodsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PaymentMethod>> {
            return localVarFp.listPayoutMethods(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user.
         * @summary Delete a User
         * @param {UsersApiRemoveUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUser(requestParameters: UsersApiRemoveUserRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.removeUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a user a verification token.
         * @summary Send a Verification Token
         * @param {UsersApiSendVerificationTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationToken(requestParameters: UsersApiSendVerificationTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sendVerificationToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add Compliance information to a user.
         * @summary Submit Compliance Information
         * @param {UsersApiSubmitComplianceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitComplianceInfo(requestParameters: UsersApiSubmitComplianceInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitComplianceInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update mutable fields of a user object.
         * @summary Update a user
         * @param {UsersApiUpdateUserObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserObject(requestParameters: UsersApiUpdateUserObjectRequest, options?: AxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateUserObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify a user with a token.
         * @summary Verify a User
         * @param {UsersApiVerifyUserTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserToken(requestParameters: UsersApiVerifyUserTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyUserToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPayoutMethod operation in UsersApi.
 * @export
 * @interface UsersApiAddPayoutMethodRequest
 */
export type UsersApiAddPayoutMethodRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiAddPayoutMethod
    */
    readonly userId: string
    
} & UsersAddPayoutMethodRequest

/**
 * Request parameters for createNewUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateNewUserRequest
 */
export type UsersApiCreateNewUserRequest = {
    
} & UsersCreateNewUserRequest

/**
 * Request parameters for getUserById operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdRequest
 */
export type UsersApiGetUserByIdRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiGetUserById
    */
    readonly userId: string
    
}

/**
 * Request parameters for listAllUsers operation in UsersApi.
 * @export
 * @interface UsersApiListAllUsersRequest
 */
export type UsersApiListAllUsersRequest = {
    
    /**
    * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list.
    * @type {string}
    * @memberof UsersApiListAllUsers
    */
    readonly startingAfter?: string
    
    /**
    * A limit on the number of objects to be returned, between 1 and 100.
    * @type {number}
    * @memberof UsersApiListAllUsers
    */
    readonly limit?: number
    
    /**
    * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof UsersApiListAllUsers
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for listPayoutMethods operation in UsersApi.
 * @export
 * @interface UsersApiListPayoutMethodsRequest
 */
export type UsersApiListPayoutMethodsRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiListPayoutMethods
    */
    readonly userId: string
    
}

/**
 * Request parameters for removeUser operation in UsersApi.
 * @export
 * @interface UsersApiRemoveUserRequest
 */
export type UsersApiRemoveUserRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiRemoveUser
    */
    readonly userId: string
    
}

/**
 * Request parameters for sendVerificationToken operation in UsersApi.
 * @export
 * @interface UsersApiSendVerificationTokenRequest
 */
export type UsersApiSendVerificationTokenRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiSendVerificationToken
    */
    readonly userId: string
    
} & UsersSendVerificationTokenRequest

/**
 * Request parameters for submitComplianceInfo operation in UsersApi.
 * @export
 * @interface UsersApiSubmitComplianceInfoRequest
 */
export type UsersApiSubmitComplianceInfoRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiSubmitComplianceInfo
    */
    readonly userId: string
    
} & UsersSubmitComplianceInfoRequest

/**
 * Request parameters for updateUserObject operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserObjectRequest
 */
export type UsersApiUpdateUserObjectRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiUpdateUserObject
    */
    readonly userId: string
    
} & UsersUpdateUserObjectRequest

/**
 * Request parameters for verifyUserToken operation in UsersApi.
 * @export
 * @interface UsersApiVerifyUserTokenRequest
 */
export type UsersApiVerifyUserTokenRequest = {
    
    /**
    * Id of the user to fetch
    * @type {string}
    * @memberof UsersApiVerifyUserToken
    */
    readonly userId: string
    
} & UsersVerifyUserTokenRequest

/**
 * UsersApiGenerated - object-oriented interface
 * @export
 * @class UsersApiGenerated
 * @extends {BaseAPI}
 */
export class UsersApiGenerated extends BaseAPI {
    /**
     * Add a payout method to the user. Payout method can be one of `paypal`, `venmo`, `ach`, or `cash_app`. Each method has different required parameters.
     * @summary Add a Payout Method
     * @param {UsersApiAddPayoutMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public addPayoutMethod(requestParameters: UsersApiAddPayoutMethodRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).addPayoutMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a user.
     * @summary Create a User
     * @param {UsersApiCreateNewUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public createNewUser(requestParameters: UsersApiCreateNewUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createNewUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user by their id.
     * @summary Retrieve a User
     * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all users connected to your application.
     * @summary List all Users
     * @param {UsersApiListAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listAllUsers(requestParameters: UsersApiListAllUsersRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listAllUsers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a user\'s connected payout methods.
     * @summary List Payout Methods
     * @param {UsersApiListPayoutMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public listPayoutMethods(requestParameters: UsersApiListPayoutMethodsRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).listPayoutMethods(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user.
     * @summary Delete a User
     * @param {UsersApiRemoveUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public removeUser(requestParameters: UsersApiRemoveUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).removeUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a user a verification token.
     * @summary Send a Verification Token
     * @param {UsersApiSendVerificationTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public sendVerificationToken(requestParameters: UsersApiSendVerificationTokenRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).sendVerificationToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add Compliance information to a user.
     * @summary Submit Compliance Information
     * @param {UsersApiSubmitComplianceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public submitComplianceInfo(requestParameters: UsersApiSubmitComplianceInfoRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).submitComplianceInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update mutable fields of a user object.
     * @summary Update a user
     * @param {UsersApiUpdateUserObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public updateUserObject(requestParameters: UsersApiUpdateUserObjectRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify a user with a token.
     * @summary Verify a User
     * @param {UsersApiVerifyUserTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiGenerated
     */
    public verifyUserToken(requestParameters: UsersApiVerifyUserTokenRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).verifyUserToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
