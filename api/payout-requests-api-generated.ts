/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayoutRequest } from '../models';
// @ts-ignore
import { PayoutrequestsGetAllPayoutsResponse } from '../models';
// @ts-ignore
import { PayoutrequestsSubmitRequestRequest } from '../models';
// @ts-ignore
import { PayoutsSendPayoutRequestPayee } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayoutRequestsApi - axios parameter creator
 * @export
 */
export const PayoutRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all payout requests.
         * @summary List all Payout Requests
         * @param {number} [limit] A limit on the number of objects to be returned, between 1 and 100.
         * @param {string} [startingAfter] A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list.
         * @param {string} [endingBefore] A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayouts: async (limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payout-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a payout request by its id.
         * @summary Retrieve a Payout Request
         * @param {string} payoutRequestId Id of the payout request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutById: async (payoutRequestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutRequestId' is not null or undefined
            assertParamExists('getPayoutById', 'payoutRequestId', payoutRequestId)
            const localVarPath = `/v2/payout-requests/{payout_request_id}`
                .replace(`{${"payout_request_id"}}`, encodeURIComponent(String(payoutRequestId !== undefined ? payoutRequestId : `-payout_request_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-requests/{payout_request_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds.
         * @summary Create a Payout Request
         * @param {PayoutrequestsSubmitRequestRequest} [payoutrequestsSubmitRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequest: async (payoutrequestsSubmitRequestRequest?: PayoutrequestsSubmitRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payout-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payoutrequestsSubmitRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-requests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payoutrequestsSubmitRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayoutRequestsApi - functional programming interface
 * @export
 */
export const PayoutRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayoutRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * List all payout requests.
         * @summary List all Payout Requests
         * @param {PayoutRequestsApiGetAllPayoutsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPayouts(requestParameters: PayoutRequestsApiGetAllPayoutsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutrequestsGetAllPayoutsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPayouts(requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a payout request by its id.
         * @summary Retrieve a Payout Request
         * @param {PayoutRequestsApiGetPayoutByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayoutById(requestParameters: PayoutRequestsApiGetPayoutByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayoutById(requestParameters.payoutRequestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds.
         * @summary Create a Payout Request
         * @param {PayoutRequestsApiSubmitRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitRequest(requestParameters: PayoutRequestsApiSubmitRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutRequest>> {
            const payoutrequestsSubmitRequestRequest: PayoutrequestsSubmitRequestRequest = {
                amount: requestParameters.amount,
                user_id: requestParameters.user_id,
                payee: requestParameters.payee,
                metadata: requestParameters.metadata,
                memo: requestParameters.memo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitRequest(payoutrequestsSubmitRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayoutRequestsApi - factory interface
 * @export
 */
export const PayoutRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayoutRequestsApiFp(configuration)
    return {
        /**
         * List all payout requests.
         * @summary List all Payout Requests
         * @param {PayoutRequestsApiGetAllPayoutsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPayouts(requestParameters: PayoutRequestsApiGetAllPayoutsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayoutrequestsGetAllPayoutsResponse> {
            return localVarFp.getAllPayouts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a payout request by its id.
         * @summary Retrieve a Payout Request
         * @param {PayoutRequestsApiGetPayoutByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutById(requestParameters: PayoutRequestsApiGetPayoutByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutRequest> {
            return localVarFp.getPayoutById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds.
         * @summary Create a Payout Request
         * @param {PayoutRequestsApiSubmitRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitRequest(requestParameters: PayoutRequestsApiSubmitRequestRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutRequest> {
            return localVarFp.submitRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllPayouts operation in PayoutRequestsApi.
 * @export
 * @interface PayoutRequestsApiGetAllPayoutsRequest
 */
export type PayoutRequestsApiGetAllPayoutsRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 100.
    * @type {number}
    * @memberof PayoutRequestsApiGetAllPayouts
    */
    readonly limit?: number
    
    /**
    * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list.
    * @type {string}
    * @memberof PayoutRequestsApiGetAllPayouts
    */
    readonly startingAfter?: string
    
    /**
    * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof PayoutRequestsApiGetAllPayouts
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for getPayoutById operation in PayoutRequestsApi.
 * @export
 * @interface PayoutRequestsApiGetPayoutByIdRequest
 */
export type PayoutRequestsApiGetPayoutByIdRequest = {
    
    /**
    * Id of the payout request
    * @type {string}
    * @memberof PayoutRequestsApiGetPayoutById
    */
    readonly payoutRequestId: string
    
}

/**
 * Request parameters for submitRequest operation in PayoutRequestsApi.
 * @export
 * @interface PayoutRequestsApiSubmitRequestRequest
 */
export type PayoutRequestsApiSubmitRequestRequest = {
    
} & PayoutrequestsSubmitRequestRequest

/**
 * PayoutRequestsApiGenerated - object-oriented interface
 * @export
 * @class PayoutRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class PayoutRequestsApiGenerated extends BaseAPI {
    /**
     * List all payout requests.
     * @summary List all Payout Requests
     * @param {PayoutRequestsApiGetAllPayoutsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutRequestsApiGenerated
     */
    public getAllPayouts(requestParameters: PayoutRequestsApiGetAllPayoutsRequest = {}, options?: AxiosRequestConfig) {
        return PayoutRequestsApiFp(this.configuration).getAllPayouts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a payout request by its id.
     * @summary Retrieve a Payout Request
     * @param {PayoutRequestsApiGetPayoutByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutRequestsApiGenerated
     */
    public getPayoutById(requestParameters: PayoutRequestsApiGetPayoutByIdRequest, options?: AxiosRequestConfig) {
        return PayoutRequestsApiFp(this.configuration).getPayoutById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a payout request from a person when you know their phone number or user id. Once the payout request is approved, they will be sent a Payout Link to onboard and recieve funds.
     * @summary Create a Payout Request
     * @param {PayoutRequestsApiSubmitRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutRequestsApiGenerated
     */
    public submitRequest(requestParameters: PayoutRequestsApiSubmitRequestRequest, options?: AxiosRequestConfig) {
        return PayoutRequestsApiFp(this.configuration).submitRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
