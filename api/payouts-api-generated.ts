/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayoutLink } from '../models';
// @ts-ignore
import { PayoutsCreatePayoutRequest } from '../models';
// @ts-ignore
import { PayoutsSendPayoutRequest } from '../models';
// @ts-ignore
import { PayoutsSendPayoutRequestDelivery } from '../models';
// @ts-ignore
import { PayoutsSendPayoutRequestPayee } from '../models';
// @ts-ignore
import { Transfer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayoutsApi - axios parameter creator
 * @export
 */
export const PayoutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a payout for an existing user that has a payout method saved to their account.
         * @summary Create a Payout
         * @param {PayoutsCreatePayoutRequest} [payoutsCreatePayoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayout: async (payoutsCreatePayoutRequest?: PayoutsCreatePayoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payoutsCreatePayoutRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payouts',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payoutsCreatePayoutRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds.
         * @summary Send a Payout
         * @param {PayoutsSendPayoutRequest} [payoutsSendPayoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayout: async (payoutsSendPayoutRequest?: PayoutsSendPayoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payouts/send-payout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payoutsSendPayoutRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payouts/send-payout',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payoutsSendPayoutRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayoutsApi - functional programming interface
 * @export
 */
export const PayoutsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayoutsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a payout for an existing user that has a payout method saved to their account.
         * @summary Create a Payout
         * @param {PayoutsApiCreatePayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayout(requestParameters: PayoutsApiCreatePayoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const payoutsCreatePayoutRequest: PayoutsCreatePayoutRequest = {
                user_id: requestParameters.user_id,
                amount: requestParameters.amount,
                platform: requestParameters.platform,
                account_id: requestParameters.account_id,
                fund: requestParameters.fund,
                idempotency_key: requestParameters.idempotency_key,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayout(payoutsCreatePayoutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds.
         * @summary Send a Payout
         * @param {PayoutsApiSendPayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendPayout(requestParameters: PayoutsApiSendPayoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutLink>> {
            const payoutsSendPayoutRequest: PayoutsSendPayoutRequest = {
                amount: requestParameters.amount,
                user_id: requestParameters.user_id,
                payee: requestParameters.payee,
                delivery: requestParameters.delivery,
                force_collect_compliance_information: requestParameters.force_collect_compliance_information,
                additional_steps: requestParameters.additional_steps,
                tax_exempt: requestParameters.tax_exempt,
                metadata: requestParameters.metadata,
                memo: requestParameters.memo,
                idempotency_key: requestParameters.idempotency_key,
                payout_fee_party: requestParameters.payout_fee_party
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendPayout(payoutsSendPayoutRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayoutsApi - factory interface
 * @export
 */
export const PayoutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayoutsApiFp(configuration)
    return {
        /**
         * Create a payout for an existing user that has a payout method saved to their account.
         * @summary Create a Payout
         * @param {PayoutsApiCreatePayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayout(requestParameters: PayoutsApiCreatePayoutRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.createPayout(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds.
         * @summary Send a Payout
         * @param {PayoutsApiSendPayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendPayout(requestParameters: PayoutsApiSendPayoutRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutLink> {
            return localVarFp.sendPayout(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPayout operation in PayoutsApi.
 * @export
 * @interface PayoutsApiCreatePayoutRequest
 */
export type PayoutsApiCreatePayoutRequest = {
    
} & PayoutsCreatePayoutRequest

/**
 * Request parameters for sendPayout operation in PayoutsApi.
 * @export
 * @interface PayoutsApiSendPayoutRequest
 */
export type PayoutsApiSendPayoutRequest = {
    
} & PayoutsSendPayoutRequest

/**
 * PayoutsApiGenerated - object-oriented interface
 * @export
 * @class PayoutsApiGenerated
 * @extends {BaseAPI}
 */
export class PayoutsApiGenerated extends BaseAPI {
    /**
     * Create a payout for an existing user that has a payout method saved to their account.
     * @summary Create a Payout
     * @param {PayoutsApiCreatePayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiGenerated
     */
    public createPayout(requestParameters: PayoutsApiCreatePayoutRequest, options?: AxiosRequestConfig) {
        return PayoutsApiFp(this.configuration).createPayout(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a payout to a person when you know their phone number or user id. If the user has a Dots acconut, the funds will delivered according to their saved prefernces. Otherwise, they will be sent a Payout Link to onboard and recieve funds.
     * @summary Send a Payout
     * @param {PayoutsApiSendPayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiGenerated
     */
    public sendPayout(requestParameters: PayoutsApiSendPayoutRequest, options?: AxiosRequestConfig) {
        return PayoutsApiFp(this.configuration).sendPayout(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
