/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { App } from '../models';
// @ts-ignore
import { AppsAddAchAccountRequest } from '../models';
// @ts-ignore
import { AppsAddAchAccountResponse } from '../models';
// @ts-ignore
import { AppsCreateNewAppRequest } from '../models';
// @ts-ignore
import { AppsDepositFundsRequest } from '../models';
// @ts-ignore
import { AppsGetAchAccountResponse } from '../models';
// @ts-ignore
import { AppsWithdrawFundsRequest } from '../models';
// @ts-ignore
import { BusinessComplianceInfo } from '../models';
// @ts-ignore
import { BusinessComplianceInfoCompanyInfo } from '../models';
// @ts-ignore
import { BusinessComplianceInfoContactInfo } from '../models';
// @ts-ignore
import { BusinessComplianceInfoDirectorsInner } from '../models';
// @ts-ignore
import { BusinessComplianceInfoFlowOfFunds } from '../models';
// @ts-ignore
import { Transfer } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AppsApi - axios parameter creator
 * @export
 */
export const AppsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an ACH account to an app. The account\'s owner must match the compliance information submitted.
         * @summary Add App ACH Account
         * @param {string} appId The ID of the app.
         * @param {AppsAddAchAccountRequest} [appsAddAchAccountRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAchAccount: async (appId: string, appsAddAchAccountRequest?: AppsAddAchAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('addAchAccount', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}/ach-account`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsAddAchAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}/ach-account',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsAddAchAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an app in your organization
         * @summary Create an App
         * @param {AppsCreateNewAppRequest} [appsCreateNewAppRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApp: async (appsCreateNewAppRequest?: AppsCreateNewAppRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsCreateNewAppRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsCreateNewAppRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deposit funds into App wallet by endpoint.
         * @summary Deposit Funds into App Wallet
         * @param {string} appId The ID of the App.
         * @param {AppsDepositFundsRequest} [appsDepositFundsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositFunds: async (appId: string, appsDepositFundsRequest?: AppsDepositFundsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('depositFunds', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}/deposit`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsDepositFundsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}/deposit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsDepositFundsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the App\'s ach account information.
         * @summary Get App ACH Account
         * @param {string} appId The ID of the app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAchAccount: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getAchAccount', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}/ach-account`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}/ach-account',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an app in your organization by its ID
         * @summary Retrieve an App
         * @param {string} appId ID of the app to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getById', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the compliance information for an app in your organization
         * @summary Retrieve an App\'s Compliance Information
         * @param {string} appId ID of the app to query or modify
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplianceInfo: async (appId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('getComplianceInfo', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}/compliance`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}/compliance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all apps created by your organization
         * @summary List all Apps
         * @param {number} [limit] Maximum number of results to retrieve
         * @param {string} [startingAfter] ID of first app to retrieve
         * @param {string} [endingBefore] ID of last app to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or update compliance information for an app in your organization
         * @summary Update an App\'s Compliance Information
         * @param {string} appId ID of the app to query or modify
         * @param {BusinessComplianceInfo} [businessComplianceInfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComplianceInfo: async (appId: string, businessComplianceInfo?: BusinessComplianceInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('updateComplianceInfo', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}/compliance`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: businessComplianceInfo,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}/compliance',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(businessComplianceInfo, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw funds from app wallet into app bank account.
         * @summary Withdraw Funds From App Wallet
         * @param {string} appId The ID of the App.
         * @param {AppsWithdrawFundsRequest} [appsWithdrawFundsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawFunds: async (appId: string, appsWithdrawFundsRequest?: AppsWithdrawFundsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('withdrawFunds', 'appId', appId)
            const localVarPath = `/v2/apps/{app_id}/withdraw`
                .replace(`{${"app_id"}}`, encodeURIComponent(String(appId !== undefined ? appId : `-app_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: appsWithdrawFundsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/apps/{app_id}/withdraw',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(appsWithdrawFundsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppsApi - functional programming interface
 * @export
 */
export const AppsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an ACH account to an app. The account\'s owner must match the compliance information submitted.
         * @summary Add App ACH Account
         * @param {AppsApiAddAchAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAchAccount(requestParameters: AppsApiAddAchAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsAddAchAccountResponse>> {
            const appsAddAchAccountRequest: AppsAddAchAccountRequest = {
                account_number: requestParameters.account_number,
                routing_number: requestParameters.routing_number,
                account_type: requestParameters.account_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAchAccount(requestParameters.appId, appsAddAchAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an app in your organization
         * @summary Create an App
         * @param {AppsApiCreateNewAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewApp(requestParameters: AppsApiCreateNewAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<App>> {
            const appsCreateNewAppRequest: AppsCreateNewAppRequest = {
                name: requestParameters.name,
                metadata: requestParameters.metadata
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewApp(appsCreateNewAppRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deposit funds into App wallet by endpoint.
         * @summary Deposit Funds into App Wallet
         * @param {AppsApiDepositFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositFunds(requestParameters: AppsApiDepositFundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const appsDepositFundsRequest: AppsDepositFundsRequest = {
                amount: requestParameters.amount,
                idempotency_key: requestParameters.idempotency_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositFunds(requestParameters.appId, appsDepositFundsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the App\'s ach account information.
         * @summary Get App ACH Account
         * @param {AppsApiGetAchAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAchAccount(requestParameters: AppsApiGetAchAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsGetAchAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAchAccount(requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve an app in your organization by its ID
         * @summary Retrieve an App
         * @param {AppsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: AppsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<App>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the compliance information for an app in your organization
         * @summary Retrieve an App\'s Compliance Information
         * @param {AppsApiGetComplianceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComplianceInfo(requestParameters: AppsApiGetComplianceInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessComplianceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComplianceInfo(requestParameters.appId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all apps created by your organization
         * @summary List all Apps
         * @param {AppsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: AppsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<App>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or update compliance information for an app in your organization
         * @summary Update an App\'s Compliance Information
         * @param {AppsApiUpdateComplianceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComplianceInfo(requestParameters: AppsApiUpdateComplianceInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessComplianceInfo>> {
            const businessComplianceInfo: BusinessComplianceInfo = {
                company_info: requestParameters.company_info,
                contact_info: requestParameters.contact_info,
                directors: requestParameters.directors,
                flow_of_funds: requestParameters.flow_of_funds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComplianceInfo(requestParameters.appId, businessComplianceInfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Withdraw funds from app wallet into app bank account.
         * @summary Withdraw Funds From App Wallet
         * @param {AppsApiWithdrawFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawFunds(requestParameters: AppsApiWithdrawFundsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transfer>> {
            const appsWithdrawFundsRequest: AppsWithdrawFundsRequest = {
                amount: requestParameters.amount,
                idempotency_key: requestParameters.idempotency_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawFunds(requestParameters.appId, appsWithdrawFundsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppsApi - factory interface
 * @export
 */
export const AppsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppsApiFp(configuration)
    return {
        /**
         * Add an ACH account to an app. The account\'s owner must match the compliance information submitted.
         * @summary Add App ACH Account
         * @param {AppsApiAddAchAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAchAccount(requestParameters: AppsApiAddAchAccountRequest, options?: AxiosRequestConfig): AxiosPromise<AppsAddAchAccountResponse> {
            return localVarFp.addAchAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an app in your organization
         * @summary Create an App
         * @param {AppsApiCreateNewAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApp(requestParameters: AppsApiCreateNewAppRequest, options?: AxiosRequestConfig): AxiosPromise<App> {
            return localVarFp.createNewApp(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deposit funds into App wallet by endpoint.
         * @summary Deposit Funds into App Wallet
         * @param {AppsApiDepositFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositFunds(requestParameters: AppsApiDepositFundsRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.depositFunds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the App\'s ach account information.
         * @summary Get App ACH Account
         * @param {AppsApiGetAchAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAchAccount(requestParameters: AppsApiGetAchAccountRequest, options?: AxiosRequestConfig): AxiosPromise<AppsGetAchAccountResponse> {
            return localVarFp.getAchAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an app in your organization by its ID
         * @summary Retrieve an App
         * @param {AppsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AppsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<App> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the compliance information for an app in your organization
         * @summary Retrieve an App\'s Compliance Information
         * @param {AppsApiGetComplianceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplianceInfo(requestParameters: AppsApiGetComplianceInfoRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessComplianceInfo> {
            return localVarFp.getComplianceInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all apps created by your organization
         * @summary List all Apps
         * @param {AppsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: AppsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<App>> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or update compliance information for an app in your organization
         * @summary Update an App\'s Compliance Information
         * @param {AppsApiUpdateComplianceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComplianceInfo(requestParameters: AppsApiUpdateComplianceInfoRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessComplianceInfo> {
            return localVarFp.updateComplianceInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw funds from app wallet into app bank account.
         * @summary Withdraw Funds From App Wallet
         * @param {AppsApiWithdrawFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawFunds(requestParameters: AppsApiWithdrawFundsRequest, options?: AxiosRequestConfig): AxiosPromise<Transfer> {
            return localVarFp.withdrawFunds(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAchAccount operation in AppsApi.
 * @export
 * @interface AppsApiAddAchAccountRequest
 */
export type AppsApiAddAchAccountRequest = {
    
    /**
    * The ID of the app.
    * @type {string}
    * @memberof AppsApiAddAchAccount
    */
    readonly appId: string
    
} & AppsAddAchAccountRequest

/**
 * Request parameters for createNewApp operation in AppsApi.
 * @export
 * @interface AppsApiCreateNewAppRequest
 */
export type AppsApiCreateNewAppRequest = {
    
} & AppsCreateNewAppRequest

/**
 * Request parameters for depositFunds operation in AppsApi.
 * @export
 * @interface AppsApiDepositFundsRequest
 */
export type AppsApiDepositFundsRequest = {
    
    /**
    * The ID of the App.
    * @type {string}
    * @memberof AppsApiDepositFunds
    */
    readonly appId: string
    
} & AppsDepositFundsRequest

/**
 * Request parameters for getAchAccount operation in AppsApi.
 * @export
 * @interface AppsApiGetAchAccountRequest
 */
export type AppsApiGetAchAccountRequest = {
    
    /**
    * The ID of the app.
    * @type {string}
    * @memberof AppsApiGetAchAccount
    */
    readonly appId: string
    
}

/**
 * Request parameters for getById operation in AppsApi.
 * @export
 * @interface AppsApiGetByIdRequest
 */
export type AppsApiGetByIdRequest = {
    
    /**
    * ID of the app to retrieve
    * @type {string}
    * @memberof AppsApiGetById
    */
    readonly appId: string
    
}

/**
 * Request parameters for getComplianceInfo operation in AppsApi.
 * @export
 * @interface AppsApiGetComplianceInfoRequest
 */
export type AppsApiGetComplianceInfoRequest = {
    
    /**
    * ID of the app to query or modify
    * @type {string}
    * @memberof AppsApiGetComplianceInfo
    */
    readonly appId: string
    
}

/**
 * Request parameters for listAll operation in AppsApi.
 * @export
 * @interface AppsApiListAllRequest
 */
export type AppsApiListAllRequest = {
    
    /**
    * Maximum number of results to retrieve
    * @type {number}
    * @memberof AppsApiListAll
    */
    readonly limit?: number
    
    /**
    * ID of first app to retrieve
    * @type {string}
    * @memberof AppsApiListAll
    */
    readonly startingAfter?: string
    
    /**
    * ID of last app to retrieve
    * @type {string}
    * @memberof AppsApiListAll
    */
    readonly endingBefore?: string
    
}

/**
 * Request parameters for updateComplianceInfo operation in AppsApi.
 * @export
 * @interface AppsApiUpdateComplianceInfoRequest
 */
export type AppsApiUpdateComplianceInfoRequest = {
    
    /**
    * ID of the app to query or modify
    * @type {string}
    * @memberof AppsApiUpdateComplianceInfo
    */
    readonly appId: string
    
} & BusinessComplianceInfo

/**
 * Request parameters for withdrawFunds operation in AppsApi.
 * @export
 * @interface AppsApiWithdrawFundsRequest
 */
export type AppsApiWithdrawFundsRequest = {
    
    /**
    * The ID of the App.
    * @type {string}
    * @memberof AppsApiWithdrawFunds
    */
    readonly appId: string
    
} & AppsWithdrawFundsRequest

/**
 * AppsApiGenerated - object-oriented interface
 * @export
 * @class AppsApiGenerated
 * @extends {BaseAPI}
 */
export class AppsApiGenerated extends BaseAPI {
    /**
     * Add an ACH account to an app. The account\'s owner must match the compliance information submitted.
     * @summary Add App ACH Account
     * @param {AppsApiAddAchAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public addAchAccount(requestParameters: AppsApiAddAchAccountRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).addAchAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an app in your organization
     * @summary Create an App
     * @param {AppsApiCreateNewAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public createNewApp(requestParameters: AppsApiCreateNewAppRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).createNewApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deposit funds into App wallet by endpoint.
     * @summary Deposit Funds into App Wallet
     * @param {AppsApiDepositFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public depositFunds(requestParameters: AppsApiDepositFundsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).depositFunds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the App\'s ach account information.
     * @summary Get App ACH Account
     * @param {AppsApiGetAchAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getAchAccount(requestParameters: AppsApiGetAchAccountRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getAchAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an app in your organization by its ID
     * @summary Retrieve an App
     * @param {AppsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getById(requestParameters: AppsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the compliance information for an app in your organization
     * @summary Retrieve an App\'s Compliance Information
     * @param {AppsApiGetComplianceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public getComplianceInfo(requestParameters: AppsApiGetComplianceInfoRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).getComplianceInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all apps created by your organization
     * @summary List all Apps
     * @param {AppsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public listAll(requestParameters: AppsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or update compliance information for an app in your organization
     * @summary Update an App\'s Compliance Information
     * @param {AppsApiUpdateComplianceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public updateComplianceInfo(requestParameters: AppsApiUpdateComplianceInfoRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).updateComplianceInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdraw funds from app wallet into app bank account.
     * @summary Withdraw Funds From App Wallet
     * @param {AppsApiWithdrawFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiGenerated
     */
    public withdrawFunds(requestParameters: AppsApiWithdrawFundsRequest, options?: AxiosRequestConfig) {
        return AppsApiFp(this.configuration).withdrawFunds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
