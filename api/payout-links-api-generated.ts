/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayoutLink } from '../models';
// @ts-ignore
import { PayoutlinksCreatePayoutLinkRequest } from '../models';
// @ts-ignore
import { PayoutlinksCreatePayoutLinkRequestDelivery } from '../models';
// @ts-ignore
import { PayoutlinksCreatePayoutLinkRequestPayee } from '../models';
// @ts-ignore
import { PayoutlinksListAllResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayoutLinksApi - axios parameter creator
 * @export
 */
export const PayoutLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a payout link
         * @summary Delete a Payout Link
         * @param {string} payoutLinkId Id of the payout link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelLink: async (payoutLinkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutLinkId' is not null or undefined
            assertParamExists('cancelLink', 'payoutLinkId', payoutLinkId)
            const localVarPath = `/v2/payout-links/{payout_link_id}`
                .replace(`{${"payout_link_id"}}`, encodeURIComponent(String(payoutLinkId !== undefined ? payoutLinkId : `-payout_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-links/{payout_link_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Payout Link.
         * @summary Create a Payout Link
         * @param {PayoutlinksCreatePayoutLinkRequest} [payoutlinksCreatePayoutLinkRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayoutLink: async (payoutlinksCreatePayoutLinkRequest?: PayoutlinksCreatePayoutLinkRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payout-links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payoutlinksCreatePayoutLinkRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-links',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payoutlinksCreatePayoutLinkRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a payout link by its id.
         * @summary Retrieve a Payout Link
         * @param {string} payoutLinkId Id of the payout link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutLink: async (payoutLinkId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payoutLinkId' is not null or undefined
            assertParamExists('getPayoutLink', 'payoutLinkId', payoutLinkId)
            const localVarPath = `/v2/payout-links/{payout_link_id}`
                .replace(`{${"payout_link_id"}}`, encodeURIComponent(String(payoutLinkId !== undefined ? payoutLinkId : `-payout_link_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-links/{payout_link_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all created Payout Links.
         * @summary List all Payout Links
         * @param {number} [limit] A limit on the number of objects to be returned, between 1 and 100.
         * @param {string} [startingAfter] A cursor for use in pagination. &#x60;starting_after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;starting_after&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the next page of the list.
         * @param {string} [endingBefore] A cursor for use in pagination. &#x60;ending_before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with &#x60;aaa&#x60;, your subsequent call can include &#x60;ending_before&#x60;&#x3D;&#x60;aaa&#x60; in order to fetch the previous page of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (limit?: number, startingAfter?: string, endingBefore?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payout-links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['ending_before'] = endingBefore;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payout-links',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayoutLinksApi - functional programming interface
 * @export
 */
export const PayoutLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayoutLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel a payout link
         * @summary Delete a Payout Link
         * @param {PayoutLinksApiCancelLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelLink(requestParameters: PayoutLinksApiCancelLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelLink(requestParameters.payoutLinkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a Payout Link.
         * @summary Create a Payout Link
         * @param {PayoutLinksApiCreatePayoutLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayoutLink(requestParameters: PayoutLinksApiCreatePayoutLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutLink>> {
            const payoutlinksCreatePayoutLinkRequest: PayoutlinksCreatePayoutLinkRequest = {
                user_id: requestParameters.user_id,
                payee: requestParameters.payee,
                amount: requestParameters.amount,
                delivery: requestParameters.delivery,
                force_collect_compliance_information: requestParameters.force_collect_compliance_information,
                tax_exempt: requestParameters.tax_exempt,
                metadata: requestParameters.metadata,
                memo: requestParameters.memo,
                idempotency_key: requestParameters.idempotency_key,
                payout_fee_party: requestParameters.payout_fee_party,
                additional_steps: requestParameters.additional_steps
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayoutLink(payoutlinksCreatePayoutLinkRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a payout link by its id.
         * @summary Retrieve a Payout Link
         * @param {PayoutLinksApiGetPayoutLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayoutLink(requestParameters: PayoutLinksApiGetPayoutLinkRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutLink>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayoutLink(requestParameters.payoutLinkId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all created Payout Links.
         * @summary List all Payout Links
         * @param {PayoutLinksApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: PayoutLinksApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutlinksListAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayoutLinksApi - factory interface
 * @export
 */
export const PayoutLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayoutLinksApiFp(configuration)
    return {
        /**
         * Cancel a payout link
         * @summary Delete a Payout Link
         * @param {PayoutLinksApiCancelLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelLink(requestParameters: PayoutLinksApiCancelLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutLink> {
            return localVarFp.cancelLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a Payout Link.
         * @summary Create a Payout Link
         * @param {PayoutLinksApiCreatePayoutLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayoutLink(requestParameters: PayoutLinksApiCreatePayoutLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutLink> {
            return localVarFp.createPayoutLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a payout link by its id.
         * @summary Retrieve a Payout Link
         * @param {PayoutLinksApiGetPayoutLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutLink(requestParameters: PayoutLinksApiGetPayoutLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PayoutLink> {
            return localVarFp.getPayoutLink(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all created Payout Links.
         * @summary List all Payout Links
         * @param {PayoutLinksApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: PayoutLinksApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayoutlinksListAllResponse> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelLink operation in PayoutLinksApi.
 * @export
 * @interface PayoutLinksApiCancelLinkRequest
 */
export type PayoutLinksApiCancelLinkRequest = {
    
    /**
    * Id of the payout link
    * @type {string}
    * @memberof PayoutLinksApiCancelLink
    */
    readonly payoutLinkId: string
    
}

/**
 * Request parameters for createPayoutLink operation in PayoutLinksApi.
 * @export
 * @interface PayoutLinksApiCreatePayoutLinkRequest
 */
export type PayoutLinksApiCreatePayoutLinkRequest = {
    
} & PayoutlinksCreatePayoutLinkRequest

/**
 * Request parameters for getPayoutLink operation in PayoutLinksApi.
 * @export
 * @interface PayoutLinksApiGetPayoutLinkRequest
 */
export type PayoutLinksApiGetPayoutLinkRequest = {
    
    /**
    * Id of the payout link
    * @type {string}
    * @memberof PayoutLinksApiGetPayoutLink
    */
    readonly payoutLinkId: string
    
}

/**
 * Request parameters for listAll operation in PayoutLinksApi.
 * @export
 * @interface PayoutLinksApiListAllRequest
 */
export type PayoutLinksApiListAllRequest = {
    
    /**
    * A limit on the number of objects to be returned, between 1 and 100.
    * @type {number}
    * @memberof PayoutLinksApiListAll
    */
    readonly limit?: number
    
    /**
    * A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `starting_after`=`aaa` in order to fetch the next page of the list.
    * @type {string}
    * @memberof PayoutLinksApiListAll
    */
    readonly startingAfter?: string
    
    /**
    * A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `aaa`, your subsequent call can include `ending_before`=`aaa` in order to fetch the previous page of the list.
    * @type {string}
    * @memberof PayoutLinksApiListAll
    */
    readonly endingBefore?: string
    
}

/**
 * PayoutLinksApiGenerated - object-oriented interface
 * @export
 * @class PayoutLinksApiGenerated
 * @extends {BaseAPI}
 */
export class PayoutLinksApiGenerated extends BaseAPI {
    /**
     * Cancel a payout link
     * @summary Delete a Payout Link
     * @param {PayoutLinksApiCancelLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutLinksApiGenerated
     */
    public cancelLink(requestParameters: PayoutLinksApiCancelLinkRequest, options?: AxiosRequestConfig) {
        return PayoutLinksApiFp(this.configuration).cancelLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a Payout Link.
     * @summary Create a Payout Link
     * @param {PayoutLinksApiCreatePayoutLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutLinksApiGenerated
     */
    public createPayoutLink(requestParameters: PayoutLinksApiCreatePayoutLinkRequest, options?: AxiosRequestConfig) {
        return PayoutLinksApiFp(this.configuration).createPayoutLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a payout link by its id.
     * @summary Retrieve a Payout Link
     * @param {PayoutLinksApiGetPayoutLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutLinksApiGenerated
     */
    public getPayoutLink(requestParameters: PayoutLinksApiGetPayoutLinkRequest, options?: AxiosRequestConfig) {
        return PayoutLinksApiFp(this.configuration).getPayoutLink(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all created Payout Links.
     * @summary List all Payout Links
     * @param {PayoutLinksApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutLinksApiGenerated
     */
    public listAll(requestParameters: PayoutLinksApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return PayoutLinksApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
