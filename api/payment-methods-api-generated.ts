/* tslint:disable */
/* eslint-disable */
/*
dots api

Scalable and Flexible Payouts Infrastructure

The version of the OpenAPI document: 1.0
Contact: info@dots.dev

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PaymentMethod } from '../models';
// @ts-ignore
import { PaymentmethodsAttachPaymentMethodRequest } from '../models';
// @ts-ignore
import { PaymentmethodsDetachPaymentMethodRequest } from '../models';
// @ts-ignore
import { PaymentmethodsListAllPaymentCustomerResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentMethodsApi - axios parameter creator
 * @export
 */
export const PaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Attach a payment method to a payment customer for future usage.
         * @summary Attach a Payment Method to a Payment Customer
         * @param {string} paymentMethodId The ID of the payment method.
         * @param {PaymentmethodsAttachPaymentMethodRequest} [paymentmethodsAttachPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPaymentMethod: async (paymentMethodId: string, paymentmethodsAttachPaymentMethodRequest?: PaymentmethodsAttachPaymentMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('attachPaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/v2/payment-methods/{payment_method_id}/attach`
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId !== undefined ? paymentMethodId : `-payment_method_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentmethodsAttachPaymentMethodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-methods/{payment_method_id}/attach',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentmethodsAttachPaymentMethodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detach a payment method from a payment customer
         * @summary Detach Payment Method from a Payment Customer
         * @param {string} paymentMethodId ID of the payment method.
         * @param {PaymentmethodsDetachPaymentMethodRequest} [paymentmethodsDetachPaymentMethodRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPaymentMethod: async (paymentMethodId: string, paymentmethodsDetachPaymentMethodRequest?: PaymentmethodsDetachPaymentMethodRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('detachPaymentMethod', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/v2/payment-methods/{payment_method_id}/detach`
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId !== undefined ? paymentMethodId : `-payment_method_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: paymentmethodsDetachPaymentMethodRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-methods/{payment_method_id}/detach',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(paymentmethodsDetachPaymentMethodRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a payment method by its ID.
         * @summary Retrieve a Payment Method
         * @param {string} paymentMethodId ID of the payment method to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (paymentMethodId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paymentMethodId' is not null or undefined
            assertParamExists('getById', 'paymentMethodId', paymentMethodId)
            const localVarPath = `/v2/payment-methods/{payment_method_id}`
                .replace(`{${"payment_method_id"}}`, encodeURIComponent(String(paymentMethodId !== undefined ? paymentMethodId : `-payment_method_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-methods/{payment_method_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the payment methods for a payment customer
         * @summary List all Payment Methods for a Payment Customer
         * @param {string} [customerId] Payment Customer ID
         * @param {number} [limit] Number or payment methods to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllPaymentCustomer: async (customerId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payment-methods',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentMethodsApi - functional programming interface
 * @export
 */
export const PaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Attach a payment method to a payment customer for future usage.
         * @summary Attach a Payment Method to a Payment Customer
         * @param {PaymentMethodsApiAttachPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachPaymentMethod(requestParameters: PaymentMethodsApiAttachPaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const paymentmethodsAttachPaymentMethodRequest: PaymentmethodsAttachPaymentMethodRequest = {
                customer_id: requestParameters.customer_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachPaymentMethod(requestParameters.paymentMethodId, paymentmethodsAttachPaymentMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Detach a payment method from a payment customer
         * @summary Detach Payment Method from a Payment Customer
         * @param {PaymentMethodsApiDetachPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detachPaymentMethod(requestParameters: PaymentMethodsApiDetachPaymentMethodRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const paymentmethodsDetachPaymentMethodRequest: PaymentmethodsDetachPaymentMethodRequest = {
                customer_id: requestParameters.customer_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.detachPaymentMethod(requestParameters.paymentMethodId, paymentmethodsDetachPaymentMethodRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a payment method by its ID.
         * @summary Retrieve a Payment Method
         * @param {PaymentMethodsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: PaymentMethodsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.paymentMethodId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the payment methods for a payment customer
         * @summary List all Payment Methods for a Payment Customer
         * @param {PaymentMethodsApiListAllPaymentCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllPaymentCustomer(requestParameters: PaymentMethodsApiListAllPaymentCustomerRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentmethodsListAllPaymentCustomerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllPaymentCustomer(requestParameters.customerId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentMethodsApi - factory interface
 * @export
 */
export const PaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentMethodsApiFp(configuration)
    return {
        /**
         * Attach a payment method to a payment customer for future usage.
         * @summary Attach a Payment Method to a Payment Customer
         * @param {PaymentMethodsApiAttachPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPaymentMethod(requestParameters: PaymentMethodsApiAttachPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.attachPaymentMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Detach a payment method from a payment customer
         * @summary Detach Payment Method from a Payment Customer
         * @param {PaymentMethodsApiDetachPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPaymentMethod(requestParameters: PaymentMethodsApiDetachPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.detachPaymentMethod(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a payment method by its ID.
         * @summary Retrieve a Payment Method
         * @param {PaymentMethodsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: PaymentMethodsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the payment methods for a payment customer
         * @summary List all Payment Methods for a Payment Customer
         * @param {PaymentMethodsApiListAllPaymentCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllPaymentCustomer(requestParameters: PaymentMethodsApiListAllPaymentCustomerRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PaymentmethodsListAllPaymentCustomerResponse> {
            return localVarFp.listAllPaymentCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for attachPaymentMethod operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiAttachPaymentMethodRequest
 */
export type PaymentMethodsApiAttachPaymentMethodRequest = {
    
    /**
    * The ID of the payment method.
    * @type {string}
    * @memberof PaymentMethodsApiAttachPaymentMethod
    */
    readonly paymentMethodId: string
    
} & PaymentmethodsAttachPaymentMethodRequest

/**
 * Request parameters for detachPaymentMethod operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiDetachPaymentMethodRequest
 */
export type PaymentMethodsApiDetachPaymentMethodRequest = {
    
    /**
    * ID of the payment method.
    * @type {string}
    * @memberof PaymentMethodsApiDetachPaymentMethod
    */
    readonly paymentMethodId: string
    
} & PaymentmethodsDetachPaymentMethodRequest

/**
 * Request parameters for getById operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiGetByIdRequest
 */
export type PaymentMethodsApiGetByIdRequest = {
    
    /**
    * ID of the payment method to get
    * @type {string}
    * @memberof PaymentMethodsApiGetById
    */
    readonly paymentMethodId: string
    
}

/**
 * Request parameters for listAllPaymentCustomer operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiListAllPaymentCustomerRequest
 */
export type PaymentMethodsApiListAllPaymentCustomerRequest = {
    
    /**
    * Payment Customer ID
    * @type {string}
    * @memberof PaymentMethodsApiListAllPaymentCustomer
    */
    readonly customerId?: string
    
    /**
    * Number or payment methods to return
    * @type {number}
    * @memberof PaymentMethodsApiListAllPaymentCustomer
    */
    readonly limit?: number
    
}

/**
 * PaymentMethodsApiGenerated - object-oriented interface
 * @export
 * @class PaymentMethodsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentMethodsApiGenerated extends BaseAPI {
    /**
     * Attach a payment method to a payment customer for future usage.
     * @summary Attach a Payment Method to a Payment Customer
     * @param {PaymentMethodsApiAttachPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiGenerated
     */
    public attachPaymentMethod(requestParameters: PaymentMethodsApiAttachPaymentMethodRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).attachPaymentMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Detach a payment method from a payment customer
     * @summary Detach Payment Method from a Payment Customer
     * @param {PaymentMethodsApiDetachPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiGenerated
     */
    public detachPaymentMethod(requestParameters: PaymentMethodsApiDetachPaymentMethodRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).detachPaymentMethod(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a payment method by its ID.
     * @summary Retrieve a Payment Method
     * @param {PaymentMethodsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiGenerated
     */
    public getById(requestParameters: PaymentMethodsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the payment methods for a payment customer
     * @summary List all Payment Methods for a Payment Customer
     * @param {PaymentMethodsApiListAllPaymentCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApiGenerated
     */
    public listAllPaymentCustomer(requestParameters: PaymentMethodsApiListAllPaymentCustomerRequest = {}, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).listAllPaymentCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
